/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Breakpoint } from "./utils/breakpoints";
import { DatepickerType } from "./components/cat-datepicker/datepicker-type";
import { ErrorMap } from "./components/cat-form-hint/cat-form-hint";
import { Placement } from "@floating-ui/dom";
import { InputType } from "./components/cat-input/input-type";
import { CatSelectConnector, CatSelectMultipleTaggingValue, CatSelectTaggingValue, Item } from "./components/cat-select/cat-select";
import { Observable } from "rxjs";
import { CatSelectMultipleTaggingValue as CatSelectMultipleTaggingValue1, CatSelectTaggingValue as CatSelectTaggingValue1 } from "./components/cat-select/cat-select";
export { Breakpoint } from "./utils/breakpoints";
export { DatepickerType } from "./components/cat-datepicker/datepicker-type";
export { ErrorMap } from "./components/cat-form-hint/cat-form-hint";
export { Placement } from "@floating-ui/dom";
export { InputType } from "./components/cat-input/input-type";
export { CatSelectConnector, CatSelectMultipleTaggingValue, CatSelectTaggingValue, Item } from "./components/cat-select/cat-select";
export { Observable } from "rxjs";
export { CatSelectMultipleTaggingValue as CatSelectMultipleTaggingValue1, CatSelectTaggingValue as CatSelectTaggingValue1 } from "./components/cat-select/cat-select";
export namespace Components {
    /**
     * Informs user about important changes or conditions in the interface. Use this
     * component if you need to capture user’s attention in a prominent way.
     */
    interface CatAlert {
        /**
          * The color palette of the alert.
         */
        "color": 'primary' | 'secondary' | 'danger' | 'success' | 'warning';
        /**
          * The name of an icon to be displayed in the alert.
         */
        "icon"?: string;
        /**
          * Whether the icon of the alert is deactivated.
         */
        "noIcon": boolean;
    }
    /**
     * Avatars are used to represent a person or object.
     */
    interface CatAvatar {
        /**
          * An icon to be used instead of the initials.
         */
        "icon"?: string;
        /**
          * Custom initials for the avatar.
         */
        "initials"?: string;
        /**
          * The label of the avatar.
         */
        "label": string;
        /**
          * Use round avatar edges.
         */
        "round": boolean;
        /**
          * The size of the avatar.
         */
        "size": 'xs' | 's' | 'm' | 'l' | 'xl';
        /**
          * An optional avatar image.
         */
        "src"?: string;
        /**
          * A destination to link to, rendered in the href attribute of a link.
         */
        "url"?: string;
        /**
          * Specifies where to open the linked document.
         */
        "urlTarget"?: '_blank' | '_self';
    }
    /**
     * Badges are used to inform users of the status of an object or of an action
     * that’s been taken.
     */
    interface CatBadge {
        /**
          * The color palette of the badge.
         */
        "color": 'primary' | 'secondary' | 'danger' | 'success' | 'warning';
        /**
          * Draw attention to the badge with a subtle animation.
         */
        "pulse": boolean;
        /**
          * Use round badge edges.
         */
        "round": boolean;
        /**
          * The size of the badge.
         */
        "size": 'xs' | 's' | 'm' | 'l' | 'xl';
        /**
          * The rendering style of the badge.
         */
        "variant": 'filled' | 'outlined';
    }
    /**
     * Buttons are used for interface actions. Primary style should be used only
     * once per view for main call-to-action.
     */
    interface CatButton {
        /**
          * Sets the `aria-current` attribute on the button.
         */
        "a11yCurrent"?: string;
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "a11yLabel"?: string;
        /**
          * Set the button into an active state.
         */
        "active": boolean;
        /**
          * The index of a button that is used inside a cat-button-group component
         */
        "buttonGroupPosition"?: 'first' | 'last' | 'middle';
        /**
          * Adds a unique identifier for the button. Please note that with this particular component this ID is added inside the web component. If you need an ID on the HTML element, use the regular `id` attribute instead.
         */
        "buttonId"?: string;
        /**
          * The color palette of the button.
         */
        "color": 'primary' | 'secondary' | 'danger' | 'success' | 'warning';
        /**
          * Specifies that the button should be disabled. A disabled button is unusable and un-clickable. Corresponds with the native HTML disabled attribute.
         */
        "disabled": boolean;
        /**
          * Programmatically remove focus from the button. Use this method instead of `button.blur()`.
         */
        "doBlur": () => Promise<void>;
        /**
          * Programmatically simulate a click on the button.
         */
        "doClick": () => Promise<void>;
        /**
          * Programmatically move focus to the button. Use this method instead of `button.focus()`.
          * @param options An optional object providing options to control aspects of the focusing process.
         */
        "doFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * The name of an icon to be displayed in the button.
         */
        "icon"?: string;
        /**
          * Hide the actual button content and only display the icon.
         */
        "iconOnly": boolean | Breakpoint;
        /**
          * Display the icon on the right.
         */
        "iconRight": boolean;
        /**
          * Displays the button in a loading state with a spinner. Just like a disabled button, an inactive button is unusable and un-clickable. However, it retains the current focus state.
         */
        "loading": boolean;
        /**
          * The name of the button, which gets paired with the button's value when submitted as part of a form. Corresponds with the native HTML name attribute.
         */
        "name"?: string;
        /**
          * Attributes that will be added to the native HTML button element
         */
        "nativeAttributes"?: { [key: string]: string };
        /**
          * Disables ellipse overflowing button content.
         */
        "noEllipsis": boolean;
        /**
          * Use round button edges.
         */
        "round": boolean;
        /**
          * The size of the button.
         */
        "size": 'xs' | 's' | 'm' | 'l' | 'xl';
        /**
          * Allows the button to submit a form.
         */
        "submit": boolean;
        /**
          * A destination to link to, rendered in the href attribute of a link.
         */
        "url"?: string;
        /**
          * Specifies where to open the linked document.
         */
        "urlTarget"?: '_blank' | '_self';
        /**
          * The value of the button, which gets paired with the button's name when submitted as part of a form. Corresponds with the native HTML value attribute.
         */
        "value"?: string;
        /**
          * The rendering style of the button.
         */
        "variant": 'filled' | 'outlined' | 'text';
    }
    interface CatButtonGroup {
        /**
          * Adds an accessible label for the button group that it is only shown in assistive technologies, like screen readers.
         */
        "a11yLabel"?: string;
    }
    /**
     * Cards are surfaces that display content and actions on a single topic. They
     * should be easy to scan for relevant and actionable information.
     */
    interface CatCard {
    }
    /**
     * Checkboxes are used to let a user choose one or more options from a limited
     * number of options.
     */
    interface CatCheckbox {
        /**
          * Checked state of the checkbox
         */
        "checked": boolean;
        /**
          * Disabled state of the checkbox
         */
        "disabled": boolean;
        /**
          * Programmatically remove focus from the checkbox. Use this method instead of `input.blur()`.
         */
        "doBlur": () => Promise<void>;
        /**
          * Programmatically simulate a click on the checkbox.
         */
        "doClick": () => Promise<void>;
        /**
          * Programmatically move focus to the checkbox. Use this method instead of `input.focus()`.
          * @param options An optional object providing options to control aspects of the focusing process.
         */
        "doFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Optional hint text(s) to be displayed with the checkbox.
         */
        "hint"?: string | string[];
        /**
          * A unique identifier for the input.
         */
        "identifier"?: string;
        /**
          * Indeterminate state of the checkbox
         */
        "indeterminate": boolean;
        /**
          * Label of the checkbox which is presented in the UI
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden": boolean;
        /**
          * Whether the label should appear to the left of the checkbox.
         */
        "labelLeft": boolean;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Attributes that will be added to the native HTML input element.
         */
        "nativeAttributes"?: { [key: string]: string };
        /**
          * Required state of the checkbox
         */
        "required": boolean;
        /**
          * The value of the checkbox
         */
        "value"?: string | boolean;
    }
    /**
     * Inputs are used to allow users to provide text input when the expected input
     * is short. As well as plain text, Input supports various types of text,
     * including passwords and numbers.
     */
    interface CatDatepicker {
        /**
          * Hint for form autofill feature.
         */
        "autoComplete"?: string;
        /**
          * Clear the input.
         */
        "clear": () => Promise<void>;
        /**
          * Whether the input should show a clear button.
         */
        "clearable": boolean;
        /**
          * Dates that should be disabled inside the picker
         */
        "datesDisabled": Array<Date> | Array<string>;
        /**
          * Whether the input is disabled.
         */
        "disabled": boolean;
        /**
          * Programmatically remove focus from the input. Use this method instead of `input.blur()`.
         */
        "doBlur": () => Promise<void>;
        /**
          * Programmatically simulate a click on the input.
         */
        "doClick": () => Promise<void>;
        /**
          * Programmatically move focus to the input. Use this method instead of `input.focus()`.
          * @param options An optional object providing options to control aspects of the focusing process.
         */
        "doFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Fine-grained control over when the errors are shown. Can be `false` to never show errors, `true` to show errors on blur, or a number to show errors on change with the given delay in milliseconds.
         */
        "errorUpdate": boolean | number;
        /**
          * The validation errors for this input. Will render a hint under the input with the translated error message(s) `error.${key}`. If an object is passed, the keys will be used as error keys and the values translation parameters. If the value is `true`, the input will be marked as invalid without any hints under the input.
         */
        "errors"?: boolean | string[] | ErrorMap;
        /**
          * The date format after picker selection.
         */
        "format": string;
        /**
          * Optional hint text(s) to be displayed with the input.
         */
        "hint"?: string | string[];
        /**
          * Whether the label is on top or left.
         */
        "horizontal": boolean;
        /**
          * The name of an icon to be displayed in the input.
         */
        "icon"?: string;
        /**
          * Display the icon on the left.
         */
        "iconLeft": boolean;
        /**
          * A unique identifier for the input.
         */
        "identifier"?: string;
        /**
          * The label for the input.
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden": boolean;
        /**
          * A maximum value for date, time and numeric values.
         */
        "max"?: number | string;
        /**
          * A minimum value for date, time and numeric values.
         */
        "min"?: number | string;
        /**
          * The name of the form control. Submitted with the form as part of a name/value pair.
         */
        "name"?: string;
        /**
          * Attributes that will be added to the native HTML input element.
         */
        "nativeAttributes"?: { [key: string]: string };
        /**
          * The placeholder text to display within the input.
         */
        "placeholder"?: string;
        /**
          * The value is not editable.
         */
        "readonly": boolean;
        /**
          * A value is required or must be check for the form to be submittable.
         */
        "required": boolean;
        /**
          * Whether the label need a marker to shown if the input is required or optional.
         */
        "requiredMarker": 'none' | 'required' | 'optional' | 'none!' | 'optional!' | 'required!';
        /**
          * A textual prefix to be displayed in the input.
         */
        "textPrefix"?: string;
        /**
          * A textual suffix to be displayed in the input.
         */
        "textSuffix"?: string;
        /**
          * Type of datepicker ('date', 'week', 'month', 'year').
         */
        "type": DatepickerType;
        /**
          * The value of the control.
         */
        "value"?: string;
        /**
          * Whether the picker should show the week numbers.
         */
        "weekNumbers": boolean;
    }
    interface CatDropdown {
        /**
          * Closes the dropdown.
         */
        "close": () => Promise<void>;
        /**
          * Do not close the dropdown on outside clicks.
         */
        "noAutoClose": boolean;
        /**
          * Allow overflow when dropdown is open.
         */
        "overflow": boolean;
        /**
          * The placement of the dropdown.
         */
        "placement": Placement;
    }
    interface CatFormGroup {
        /**
          * Whether the label is on top or left.
         */
        "horizontal": boolean;
        /**
          * The space allocated to the input label
         */
        "labelSize"?: string;
        /**
          * Whether the labels need a marker to shown if the forms fields are required or optional.<br /><br /> By default, it is set to auto, it will display the mark depending on the number of required and optional fields: <br /> - If there are more required, the optional will be marked.<br /> - If there are less required, it will mark the required.<br /><br /> If a form field had "!", the requiredMarked of the field would not change.
         */
        "requiredMarker": 'none' | 'required' | 'optional' | 'auto';
    }
    /**
     * Icons are used to provide additional meaning or in places where text label
     * doesn't fit.
     */
    interface CatIcon {
        /**
          * Adds accessible label for the icon that is only shown for screen readers. The `aria-hidden` attribute will be set if no label is present.
         */
        "a11yLabel"?: string;
        /**
          * The name of the icon.
         */
        "icon"?: string;
        /**
          * The SVG source of the icon. This takes precenedence over the `icon` name.
         */
        "iconSrc"?: string;
        /**
          * The size of the icon.
         */
        "size": 'xs' | 's' | 'm' | 'l' | 'xl' | 'inline';
    }
    /**
     * Inputs are used to allow users to provide text input when the expected input
     * is short. As well as plain text, Input supports various types of text,
     * including passwords and numbers.
     */
    interface CatInput {
        /**
          * Hint for form autofill feature.
         */
        "autoComplete"?: string;
        /**
          * Clear the input.
         */
        "clear": () => Promise<void>;
        /**
          * Whether the input should show a clear button.
         */
        "clearable": boolean;
        /**
          * Whether the input is disabled.
         */
        "disabled": boolean;
        /**
          * Programmatically remove focus from the input. Use this method instead of `input.blur()`.
         */
        "doBlur": () => Promise<void>;
        /**
          * Programmatically simulate a click on the input.
         */
        "doClick": () => Promise<void>;
        /**
          * Programmatically move focus to the input. Use this method instead of `input.focus()`.
          * @param options An optional object providing options to control aspects of the focusing process.
         */
        "doFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Fine-grained control over when the errors are shown. Can be `false` to never show errors, `true` to show errors on blur, or a number to show errors on change with the given delay in milliseconds.
         */
        "errorUpdate": boolean | number;
        /**
          * The validation errors for this input. Will render a hint under the input with the translated error message(s) `error.${key}`. If an object is passed, the keys will be used as error keys and the values translation parameters. If the value is `true`, the input will be marked as invalid without any hints under the input.
         */
        "errors"?: boolean | string[] | ErrorMap;
        /**
          * Optional hint text(s) to be displayed with the input.
         */
        "hint"?: string | string[];
        /**
          * Whether the label is on top or left.
         */
        "horizontal": boolean;
        /**
          * The name of an icon to be displayed in the input.
         */
        "icon"?: string;
        /**
          * Display the icon on the right.
         */
        "iconRight": boolean;
        /**
          * A unique identifier for the input.
         */
        "identifier"?: string;
        /**
          * The label for the input.
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden": boolean;
        /**
          * A maximum value for date, time and numeric values.
         */
        "max"?: number | string;
        /**
          * A maximum length (number of characters) for textual values.
         */
        "maxLength"?: number;
        /**
          * A minimum value for date, time and numeric values.
         */
        "min"?: number | string;
        /**
          * A minimum length (number of characters) for textual values.
         */
        "minLength"?: number;
        /**
          * The name of the form control. Submitted with the form as part of a name/value pair.
         */
        "name"?: string;
        /**
          * Attributes that will be added to the native HTML input element.
         */
        "nativeAttributes"?: { [key: string]: string };
        /**
          * The placeholder text to display within the input.
         */
        "placeholder"?: string;
        /**
          * The value is not editable.
         */
        "readonly": boolean;
        /**
          * A value is required or must be check for the form to be submittable.
         */
        "required": boolean;
        /**
          * Whether the label need a marker to shown if the input is required or optional.
         */
        "requiredMarker": 'none' | 'required' | 'optional' | 'none!' | 'optional!' | 'required!';
        /**
          * Use round input edges.
         */
        "round": boolean;
        /**
          * A textual prefix to be displayed in the input.
         */
        "textPrefix"?: string;
        /**
          * A textual suffix to be displayed in the input.
         */
        "textSuffix"?: string;
        /**
          * Type of form control.
         */
        "type": InputType;
        /**
          * The value of the control.
         */
        "value"?: string | number;
    }
    /**
     * Labels are used to provide a short description of an input or form element.
     * @deprecated Use label attribute of form elements instead.
     */
    interface CatLabel {
        /**
          * The unique identifier for a referenced input.
         */
        "for"?: string;
        /**
          * Whether the label is on top or left.
         */
        "horizontal": boolean;
        /**
          * A value is required or must be check for the form to be submittable.
         */
        "required": boolean;
        /**
          * Whether the label need a marker to shown if the input is required or optional.
         */
        "requiredMarker": 'none' | 'required' | 'optional' | 'none!' | 'optional!' | 'required!';
    }
    /**
     * A navigation component to switch between different pages of paged chunks of
     * data such as a table. Pagination is built with list HTML elements and a
     * wrapping `<nav>` element to identify it as a navigation section to screen
     * readers and other assistive technologies. Furthermore, the current page is
     * correctly highlighted using `aria-current`.
     */
    interface CatPagination {
        /**
          * The number of pages to be shown around the current page.
         */
        "activePadding": number;
        /**
          * Use compact pagination mode.
         */
        "compact": boolean;
        /**
          * The icon of the "next" button.
         */
        "iconNext": string;
        /**
          * The icon of the "previous" button.
         */
        "iconPrev": string;
        /**
          * The current page.
         */
        "page": number;
        /**
          * The total number of pages.
         */
        "pageCount": number;
        /**
          * Use round button edges.
         */
        "round": boolean;
        /**
          * The number of pages to be shown at the edges.
         */
        "sidePadding": number;
        /**
          * The size of the buttons.
         */
        "size": 'xs' | 's' | 'm' | 'l' | 'xl';
        /**
          * The rendering style of the buttons.
         */
        "variant": 'filled' | 'outlined' | 'text';
    }
    /**
     * Radio Buttons are graphical interface elements that allow user to choose
     * only one of a predefined set of mutually exclusive options.
     */
    interface CatRadio {
        /**
          * Whether this radio is checked.
         */
        "checked": boolean;
        /**
          * Whether this radio is disabled.
         */
        "disabled": boolean;
        /**
          * Programmatically remove focus from the radio button. Use this method instead of `input.blur()`.
         */
        "doBlur": () => Promise<void>;
        /**
          * Programmatically simulate a click on the radio button.
         */
        "doClick": () => Promise<void>;
        /**
          * Programmatically move focus to the radio button. Use this method instead of `input.focus()`.
          * @param options An optional object providing options to control aspects of the focusing process.
         */
        "doFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Optional hint text(s) to be displayed with the radio.
         */
        "hint"?: string | string[];
        /**
          * A unique identifier for the input.
         */
        "identifier"?: string;
        /**
          * The label of the radio that is visible.
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden": boolean;
        /**
          * Whether the label should appear to the left of the radio component.
         */
        "labelLeft": boolean;
        /**
          * The name of the radio component.
         */
        "name"?: string;
        /**
          * Attributes that will be added to the native HTML input element.
         */
        "nativeAttributes"?: { [key: string]: string };
        /**
          * Whether the radio is required.
         */
        "required": boolean;
        /**
          * The value of the radio component.
         */
        "value"?: string;
    }
    /**
     * A group of radio buttons.
     */
    interface CatRadioGroup {
        /**
          * Adds an accessible label for the radio group that it is only shown in assistive technologies, like screen readers.
         */
        "a11yLabel"?: string;
        /**
          * Whether this radio group is disabled.
         */
        "disabled": boolean;
        /**
          * Whether the label of the radios should appear to the left of them.
         */
        "labelLeft": boolean;
        /**
          * The name of the radio group component.
         */
        "name"?: string;
        /**
          * The value of the radio group.
         */
        "value"?: string;
    }
    /**
     * Inputs are used to allow users to provide text input when the expected input
     * is short. As well as plain text, Input supports various types of text,
     * including passwords and numbers.
     */
    interface CatRangepicker {
        /**
          * Hint for form autofill feature.
         */
        "autoComplete"?: string;
        /**
          * Clear the input.
         */
        "clear": () => Promise<void>;
        /**
          * Whether the input should show a clear button.
         */
        "clearable": boolean;
        /**
          * Dates that should be disabled inside the picker
         */
        "datesDisabled": Array<Date> | Array<string>;
        /**
          * Whether the input is disabled.
         */
        "disabled": boolean;
        /**
          * Fine-grained control over when the errors are shown. Can be `false` to never show errors, `true` to show errors on blur, or a number to show errors on change with the given delay in milliseconds.
         */
        "errorUpdate": boolean | number;
        /**
          * The validation errors for this input. Will render a hint under the input with the translated error message(s) `error.${key}`. If an object is passed, the keys will be used as error keys and the values translation parameters. If the value is `true`, the input will be marked as invalid without any hints under the input.
         */
        "errors"?: boolean | string[] | ErrorMap;
        /**
          * The date format after picker selection.
         */
        "format": string;
        /**
          * Optional hint text(s) to be displayed with the input.
         */
        "hint"?: string | string[];
        /**
          * Whether the label is on top or left.
         */
        "horizontal": boolean;
        /**
          * The name of an icon to be displayed in the input.
         */
        "icon"?: string;
        /**
          * Display the icon on the left.
         */
        "iconLeft": boolean;
        /**
          * A unique identifier for the input.
         */
        "identifier"?: string;
        /**
          * The label for the input.
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden": boolean;
        /**
          * A maximum value for date, time and numeric values.
         */
        "max"?: number | string;
        /**
          * A minimum value for date, time and numeric values.
         */
        "min"?: number | string;
        /**
          * The name of the form control. Submitted with the form as part of a name/value pair.
         */
        "name"?: string;
        /**
          * Attributes that will be added to the native HTML input element.
         */
        "nativeAttributes"?: { [key: string]: string };
        /**
          * The placeholder text to display within the input.
         */
        "placeholder"?: string;
        /**
          * The value is not editable.
         */
        "readonly": boolean;
        /**
          * A value is required or must be check for the form to be submittable.
         */
        "required": boolean;
        /**
          * Whether the label need a marker to shown if the input is required or optional.
         */
        "requiredMarker": 'none' | 'required' | 'optional' | 'none!' | 'optional!' | 'required!';
        /**
          * A textual prefix to be displayed in the input.
         */
        "textPrefix"?: string;
        /**
          * A textual suffix to be displayed in the input.
         */
        "textSuffix"?: string;
        /**
          * The value of the control.
         */
        "value"?: { start: string; end: string };
        /**
          * Whether the picker should show the week numbers.
         */
        "weekNumbers": boolean;
    }
    /**
     * An element to display scrollable content.
     */
    interface CatScrollable {
        /**
          * Flags to disable/enable overflowX.
         */
        "noOverflowX": boolean;
        /**
          * Flags to disable/enable overflowY.
         */
        "noOverflowY": boolean;
        /**
          * Flag to disable/enable overscroll behavior.
         */
        "noOverscroll": boolean;
        /**
          * Flag to not fire an initial event after content initialization.
         */
        "noScrolledInit": boolean;
        /**
          * Flags to disable/enable scroll shadowX.
         */
        "noShadowX": boolean;
        /**
          * Flags to disable/enable scroll shadowY.
         */
        "noShadowY": boolean;
        /**
          * Buffer to be used to calculate the scroll distance.
         */
        "scrolledBuffer": number;
    }
    /**
     * Select lets user choose one option from an options' menu. Consider using
     * select when you have 6 or more options. Select component supports any content
     * type.
     */
    interface CatSelect {
        /**
          * Whether the select should show a clear button.
         */
        "clearable": boolean;
        /**
          * Connect the functions of the select
          * @param connector - The {@link CatSelectConnector} of the select.
         */
        "connect": (connector: CatSelectConnector) => Promise<void>;
        /**
          * The debounce time for the search.
         */
        "debounce": number;
        /**
          * Whether the select is disabled.
         */
        "disabled": boolean;
        /**
          * Fine-grained control over when the errors are shown. Can be `false` to never show errors, `true` to show errors on blur, or a number to show errors on change with the given delay in milliseconds.
         */
        "errorUpdate": boolean | number;
        /**
          * The validation errors for this input. Will render a hint under the input with the translated error message(s) `error.${key}`. If an object is passed, the keys will be used as error keys and the values translation parameters. If the value is `true`, the input will be marked as invalid without any hints under the input.
         */
        "errors"?: boolean | string[] | ErrorMap;
        /**
          * Optional hint text(s) to be displayed with the select.
         */
        "hint"?: string | string[];
        /**
          * Whether the label is on top or left.
         */
        "horizontal": boolean;
        /**
          * A unique identifier for the input.
         */
        "identifier"?: string;
        /**
          * The label for the select.
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden": boolean;
        /**
          * Enable multiple selection.
         */
        "multiple": boolean;
        /**
          * The name of the form control. Submitted with the form as part of a name/value pair.
         */
        "name"?: string;
        /**
          * Attributes that will be added to the native HTML input element.
         */
        "nativeAttributes"?: { [key: string]: string };
        /**
          * The text to display in the dropdown if no results are found.
         */
        "noItems"?: string;
        /**
          * The placeholder text to display within the select.
         */
        "placeholder"?: string;
        /**
          * The placement of the select.
         */
        "placement": Placement;
        /**
          * A value is required or must be checked for the form to be submittable.
         */
        "required": boolean;
        /**
          * Whether the label need a marker to shown if the select is required or optional.
         */
        "requiredMarker": 'none' | 'required' | 'optional' | 'none!' | 'optional!' | 'required!';
        /**
          * Optional hint text to be displayed on the new item to be added.
         */
        "tagHint"?: string;
        /**
          * Whether the select should add new items.
         */
        "tags": boolean;
        /**
          * The value of the select. <br /> <br /> The value of the select depends on whether it is allowed to choose a single item or several items. <br /> When only one item can be selected, the value is the id of the item, in case several items can be selected, the value is an array of ids of the selected items. <br /> <br /> In case the user can add new items to the select (tags activated), the value in the single select is an object (CatSelectTaggingValue) with the id of the item or the name of the created item, in the case of multiple select, it is an object (CatSelectMultipleTaggingValue) with the array of the ids of the items selected and the array of the names of the items created
         */
        "value"?: string | string[] | CatSelectTaggingValue | CatSelectMultipleTaggingValue;
    }
    interface CatSelectDemo {
    }
    /**
     * Skeletons are used to show where content will eventually be drawn.
     */
    interface CatSkeleton {
        /**
          * The animation style of the skeleton.
         */
        "effect": 'plain' | 'sheen' | 'pulse';
        /**
          * The number of text lines to be rendered for "head" and "body" variants. Defaults to 1 for "head" and 3 for "body". Will be ignored for other variants.
         */
        "lines"?: number;
        /**
          * The size of the skeleton. If the variant is set to "head", the size values "xs" to "xl" translate to the head levels `h1` to `h5`.
         */
        "size": 'xs' | 's' | 'm' | 'l' | 'xl';
        /**
          * The rendering style of the skeleton.
         */
        "variant": 'rectangle' | 'square' | 'circle' | 'head' | 'body';
    }
    /**
     * Spinners are used to indicate users that their action is being processed.
     */
    interface CatSpinner {
        /**
          * Adds accessible label for the spinner that is only shown for screen readers. The `aria-hidden` attribute will be set if no label is present.
         */
        "a11yLabel"?: string;
        /**
          * The size of the spinner.
         */
        "size": 'xs' | 's' | 'm' | 'l' | 'xl' | 'inline';
    }
    /**
     * A single tab inside a tabs component.
     */
    interface CatTab {
        /**
          * Specifies that the tab should be deactivated.
         */
        "deactivated": boolean;
        /**
          * The name of an icon to be displayed in the tab.
         */
        "icon"?: string;
        /**
          * Hide the actual button content and only display the tab.
         */
        "iconOnly": boolean | Breakpoint;
        /**
          * Display the icon on the right.
         */
        "iconRight": boolean;
        /**
          * The label of the tab.
         */
        "label": string;
        /**
          * A destination to link to, rendered in the href attribute of a link.
         */
        "url"?: string;
        /**
          * Specifies where to open the linked document.
         */
        "urlTarget"?: '_blank' | '_self';
    }
    /**
     * Tabs are used to display multiple panels to be contained within a single
     * window, using tabs as a navigational element.
     */
    interface CatTabs {
        /**
          * The ID of the active tab.
         */
        "activeTab": string;
        /**
          * The alignment of the tabs.
         */
        "tabsAlign": 'left' | 'center' | 'right' | 'justify';
    }
    /**
     * Textarea specifies a control that allows user to write text over multiple
     * rows. Used when the expected user input is long. For shorter input, use the
     * input component.
     */
    interface CatTextarea {
        /**
          * Whether the textarea is disabled.
         */
        "disabled": boolean;
        /**
          * Programmatically remove focus from the textarea. Use this method instead of `textarea.blur()`.
         */
        "doBlur": () => Promise<void>;
        /**
          * Programmatically simulate a click on the textarea.
         */
        "doClick": () => Promise<void>;
        /**
          * Programmatically move focus to the textarea. Use this method instead of `textarea.focus()`.
          * @param options An optional object providing options to control aspects of the focusing process.
         */
        "doFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Fine-grained control over when the errors are shown. Can be `false` to never show errors, `true` to show errors on blur, or a number to show errors on change with the given delay in milliseconds.
         */
        "errorUpdate": boolean | number;
        /**
          * The validation errors for this input. Will render a hint under the input with the translated error message(s) `error.${key}`. If an object is passed, the keys will be used as error keys and the values translation parameters. If the value is `true`, the input will be marked as invalid without any hints under the input.
         */
        "errors"?: boolean | string[] | ErrorMap;
        /**
          * Optional hint text(s) to be displayed with the textarea.
         */
        "hint"?: string | string[];
        /**
          * Whether the label is on top or left.
         */
        "horizontal": boolean;
        /**
          * A unique identifier for the input.
         */
        "identifier"?: string;
        /**
          * The label for the textarea.
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden": boolean;
        /**
          * A maximum length (number of characters) for textual values.
         */
        "maxLength"?: number;
        /**
          * A minimum length (number of characters) for textual values.
         */
        "minLength"?: number;
        /**
          * The name of the form control. Submitted with the form as part of a name/value pair.
         */
        "name"?: string;
        /**
          * Attributes that will be added to the native HTML textarea element.
         */
        "nativeAttributes"?: { [key: string]: string };
        /**
          * The placeholder text to display within the input.
         */
        "placeholder"?: string;
        /**
          * The value is not editable.
         */
        "readonly": boolean;
        /**
          * A value is required or must be check for the form to be submittable.
         */
        "required": boolean;
        /**
          * Whether the label need a marker to shown if the textarea is required or optional.
         */
        "requiredMarker": 'none' | 'required' | 'optional' | 'none!' | 'optional!' | 'required!';
        /**
          * Specifies the initial number of lines in the textarea.
         */
        "rows": number;
        /**
          * The initial value of the control.
         */
        "value"?: string | number;
    }
    /**
     * Inputs are used to allow users to provide text input when the expected input
     * is short. As well as plain text, Input supports various types of text,
     * including passwords and numbers.
     */
    interface CatTimepicker {
        /**
          * Whether the select should show a clear button.
         */
        "clearable": boolean;
        /**
          * Whether the input is disabled.
         */
        "disabled": boolean;
        /**
          * Fine-grained control over when the errors are shown. Can be `false` to never show errors, `true` to show errors on blur, or a number to show errors on change with the given delay in milliseconds.
         */
        "errorUpdate": boolean | number;
        /**
          * The validation errors for this input. Will render a hint under the input with the translated error message(s) `error.${key}`. If an object is passed, the keys will be used as error keys and the values translation parameters. If the value is `true`, the input will be marked as invalid without any hints under the input.
         */
        "errors"?: boolean | string[] | ErrorMap;
        /**
          * Optional hint text(s) to be displayed with the input.
         */
        "hint"?: string | string[];
        /**
          * Whether the label is on top or left.
         */
        "horizontal": boolean;
        /**
          * Attributes that will be added to the native HTML input element.
         */
        "hourShort": boolean;
        /**
          * A unique identifier for the input.
         */
        "identifier"?: string;
        /**
          * The label for the input.
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden": boolean;
        /**
          * A maximum value for date, time and numeric values.
         */
        "max"?: string;
        /**
          * A minimum value for date, time and numeric values.
         */
        "min"?: string;
        /**
          * Attributes that will be added to the native HTML input element.
         */
        "minutesStep": number;
        /**
          * Enable multiple selection.
         */
        "multiple": boolean;
        /**
          * The name of the form control. Submitted with the form as part of a name/value pair.
         */
        "name"?: string;
        /**
          * Attributes that will be added to the native HTML input element.
         */
        "nativeAttributes"?: { [key: string]: string };
        /**
          * The text to display in the dropdown if no results are found.
         */
        "noItems"?: string;
        /**
          * The placeholder text to display within the select.
         */
        "placeholder"?: string;
        /**
          * The placement of the select.
         */
        "placement": Placement;
        /**
          * A value is required or must be checked for the form to be submittable.
         */
        "required": boolean;
        /**
          * Whether the label need a marker to shown if the input is required or optional.
         */
        "requiredMarker": 'none' | 'required' | 'optional' | 'none!' | 'optional!' | 'required!';
        /**
          * The value of the select. <br /> <br /> The value of the select depends on whether it is allowed to choose a single item or several items. <br /> When only one item can be selected, the value is the id of the item, in case several items can be selected, the value is an array of ids of the selected items. <br /> <br /> In case the user can add new items to the select (tags activated), the value in the single select is an object (CatSelectTaggingValue) with the id of the item or the name of the created item, in the case of multiple select, it is an object (CatSelectMultipleTaggingValue) with the array of the ids of the items selected and the array of the names of the items created
         */
        "value"?: string | string[] | CatSelectTaggingValue1 | CatSelectMultipleTaggingValue1;
    }
    /**
     * Toggles are graphical interface switches that give user control over a
     * feature or option that can be turned on or off.
     */
    interface CatToggle {
        /**
          * Checked state of the toggle.
         */
        "checked": boolean;
        /**
          * Disabled state of the toggle.
         */
        "disabled": boolean;
        /**
          * Programmatically remove focus from the toggle. Use this method instead of `input.blur()`.
         */
        "doBlur": () => Promise<void>;
        /**
          * Programmatically simulate a click on the toggle.
         */
        "doClick": () => Promise<void>;
        /**
          * Programmatically move focus to the toggle. Use this method instead of `input.focus()`.
          * @param options An optional object providing options to control aspects of the focusing process.
         */
        "doFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Optional hint text(s) to be displayed with the toggle.
         */
        "hint"?: string | string[];
        /**
          * A unique identifier for the input.
         */
        "identifier"?: string;
        /**
          * The label of the toggle that is visible.
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden": boolean;
        /**
          * Whether the label should appear to the left of the toggle.
         */
        "labelLeft": boolean;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Attributes that will be added to the native HTML input element.
         */
        "nativeAttributes"?: { [key: string]: string };
        /**
          * Required state of the toggle.
         */
        "required": boolean;
        /**
          * The value of the toggle
         */
        "value"?: string | boolean;
    }
    interface CatTooltip {
        /**
          * The content of the tooltip.
         */
        "content": string;
        /**
          * Specifies that the tooltip should be disabled. A disabled tooltip is unusable, and invisible. Corresponds with the native HTML disabled attribute.
         */
        "disabled": boolean;
        /**
          * The delay time for hiding tooltip in ms.
         */
        "hideDelay": number;
        /**
          * The duration of tap to show the tooltip.
         */
        "longTouchDuration": number;
        /**
          * The placement of the tooltip.
         */
        "placement": Placement;
        /**
          * Use round tooltip edges.
         */
        "round": boolean;
        /**
          * The delay time for showing tooltip in ms.
         */
        "showDelay": number;
        /**
          * The size of the tooltip.
         */
        "size": 's' | 'm' | 'l';
    }
}
export interface CatButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatButtonElement;
}
export interface CatCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatCheckboxElement;
}
export interface CatDatepickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatDatepickerElement;
}
export interface CatDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatDropdownElement;
}
export interface CatInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatInputElement;
}
export interface CatRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatRadioElement;
}
export interface CatRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatRadioGroupElement;
}
export interface CatRangepickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatRangepickerElement;
}
export interface CatScrollableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatScrollableElement;
}
export interface CatSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatSelectElement;
}
export interface CatTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatTabElement;
}
export interface CatTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatTextareaElement;
}
export interface CatTimepickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatTimepickerElement;
}
export interface CatToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCatToggleElement;
}
declare global {
    /**
     * Informs user about important changes or conditions in the interface. Use this
     * component if you need to capture user’s attention in a prominent way.
     */
    interface HTMLCatAlertElement extends Components.CatAlert, HTMLStencilElement {
    }
    var HTMLCatAlertElement: {
        prototype: HTMLCatAlertElement;
        new (): HTMLCatAlertElement;
    };
    /**
     * Avatars are used to represent a person or object.
     */
    interface HTMLCatAvatarElement extends Components.CatAvatar, HTMLStencilElement {
    }
    var HTMLCatAvatarElement: {
        prototype: HTMLCatAvatarElement;
        new (): HTMLCatAvatarElement;
    };
    /**
     * Badges are used to inform users of the status of an object or of an action
     * that’s been taken.
     */
    interface HTMLCatBadgeElement extends Components.CatBadge, HTMLStencilElement {
    }
    var HTMLCatBadgeElement: {
        prototype: HTMLCatBadgeElement;
        new (): HTMLCatBadgeElement;
    };
    /**
     * Buttons are used for interface actions. Primary style should be used only
     * once per view for main call-to-action.
     */
    interface HTMLCatButtonElement extends Components.CatButton, HTMLStencilElement {
    }
    var HTMLCatButtonElement: {
        prototype: HTMLCatButtonElement;
        new (): HTMLCatButtonElement;
    };
    interface HTMLCatButtonGroupElement extends Components.CatButtonGroup, HTMLStencilElement {
    }
    var HTMLCatButtonGroupElement: {
        prototype: HTMLCatButtonGroupElement;
        new (): HTMLCatButtonGroupElement;
    };
    /**
     * Cards are surfaces that display content and actions on a single topic. They
     * should be easy to scan for relevant and actionable information.
     */
    interface HTMLCatCardElement extends Components.CatCard, HTMLStencilElement {
    }
    var HTMLCatCardElement: {
        prototype: HTMLCatCardElement;
        new (): HTMLCatCardElement;
    };
    /**
     * Checkboxes are used to let a user choose one or more options from a limited
     * number of options.
     */
    interface HTMLCatCheckboxElement extends Components.CatCheckbox, HTMLStencilElement {
    }
    var HTMLCatCheckboxElement: {
        prototype: HTMLCatCheckboxElement;
        new (): HTMLCatCheckboxElement;
    };
    /**
     * Inputs are used to allow users to provide text input when the expected input
     * is short. As well as plain text, Input supports various types of text,
     * including passwords and numbers.
     */
    interface HTMLCatDatepickerElement extends Components.CatDatepicker, HTMLStencilElement {
    }
    var HTMLCatDatepickerElement: {
        prototype: HTMLCatDatepickerElement;
        new (): HTMLCatDatepickerElement;
    };
    interface HTMLCatDropdownElement extends Components.CatDropdown, HTMLStencilElement {
    }
    var HTMLCatDropdownElement: {
        prototype: HTMLCatDropdownElement;
        new (): HTMLCatDropdownElement;
    };
    interface HTMLCatFormGroupElement extends Components.CatFormGroup, HTMLStencilElement {
    }
    var HTMLCatFormGroupElement: {
        prototype: HTMLCatFormGroupElement;
        new (): HTMLCatFormGroupElement;
    };
    /**
     * Icons are used to provide additional meaning or in places where text label
     * doesn't fit.
     */
    interface HTMLCatIconElement extends Components.CatIcon, HTMLStencilElement {
    }
    var HTMLCatIconElement: {
        prototype: HTMLCatIconElement;
        new (): HTMLCatIconElement;
    };
    /**
     * Inputs are used to allow users to provide text input when the expected input
     * is short. As well as plain text, Input supports various types of text,
     * including passwords and numbers.
     */
    interface HTMLCatInputElement extends Components.CatInput, HTMLStencilElement {
    }
    var HTMLCatInputElement: {
        prototype: HTMLCatInputElement;
        new (): HTMLCatInputElement;
    };
    /**
     * Labels are used to provide a short description of an input or form element.
     * @deprecated Use label attribute of form elements instead.
     */
    interface HTMLCatLabelElement extends Components.CatLabel, HTMLStencilElement {
    }
    var HTMLCatLabelElement: {
        prototype: HTMLCatLabelElement;
        new (): HTMLCatLabelElement;
    };
    /**
     * A navigation component to switch between different pages of paged chunks of
     * data such as a table. Pagination is built with list HTML elements and a
     * wrapping `<nav>` element to identify it as a navigation section to screen
     * readers and other assistive technologies. Furthermore, the current page is
     * correctly highlighted using `aria-current`.
     */
    interface HTMLCatPaginationElement extends Components.CatPagination, HTMLStencilElement {
    }
    var HTMLCatPaginationElement: {
        prototype: HTMLCatPaginationElement;
        new (): HTMLCatPaginationElement;
    };
    /**
     * Radio Buttons are graphical interface elements that allow user to choose
     * only one of a predefined set of mutually exclusive options.
     */
    interface HTMLCatRadioElement extends Components.CatRadio, HTMLStencilElement {
    }
    var HTMLCatRadioElement: {
        prototype: HTMLCatRadioElement;
        new (): HTMLCatRadioElement;
    };
    /**
     * A group of radio buttons.
     */
    interface HTMLCatRadioGroupElement extends Components.CatRadioGroup, HTMLStencilElement {
    }
    var HTMLCatRadioGroupElement: {
        prototype: HTMLCatRadioGroupElement;
        new (): HTMLCatRadioGroupElement;
    };
    /**
     * Inputs are used to allow users to provide text input when the expected input
     * is short. As well as plain text, Input supports various types of text,
     * including passwords and numbers.
     */
    interface HTMLCatRangepickerElement extends Components.CatRangepicker, HTMLStencilElement {
    }
    var HTMLCatRangepickerElement: {
        prototype: HTMLCatRangepickerElement;
        new (): HTMLCatRangepickerElement;
    };
    /**
     * An element to display scrollable content.
     */
    interface HTMLCatScrollableElement extends Components.CatScrollable, HTMLStencilElement {
    }
    var HTMLCatScrollableElement: {
        prototype: HTMLCatScrollableElement;
        new (): HTMLCatScrollableElement;
    };
    /**
     * Select lets user choose one option from an options' menu. Consider using
     * select when you have 6 or more options. Select component supports any content
     * type.
     */
    interface HTMLCatSelectElement extends Components.CatSelect, HTMLStencilElement {
    }
    var HTMLCatSelectElement: {
        prototype: HTMLCatSelectElement;
        new (): HTMLCatSelectElement;
    };
    interface HTMLCatSelectDemoElement extends Components.CatSelectDemo, HTMLStencilElement {
    }
    var HTMLCatSelectDemoElement: {
        prototype: HTMLCatSelectDemoElement;
        new (): HTMLCatSelectDemoElement;
    };
    /**
     * Skeletons are used to show where content will eventually be drawn.
     */
    interface HTMLCatSkeletonElement extends Components.CatSkeleton, HTMLStencilElement {
    }
    var HTMLCatSkeletonElement: {
        prototype: HTMLCatSkeletonElement;
        new (): HTMLCatSkeletonElement;
    };
    /**
     * Spinners are used to indicate users that their action is being processed.
     */
    interface HTMLCatSpinnerElement extends Components.CatSpinner, HTMLStencilElement {
    }
    var HTMLCatSpinnerElement: {
        prototype: HTMLCatSpinnerElement;
        new (): HTMLCatSpinnerElement;
    };
    /**
     * A single tab inside a tabs component.
     */
    interface HTMLCatTabElement extends Components.CatTab, HTMLStencilElement {
    }
    var HTMLCatTabElement: {
        prototype: HTMLCatTabElement;
        new (): HTMLCatTabElement;
    };
    /**
     * Tabs are used to display multiple panels to be contained within a single
     * window, using tabs as a navigational element.
     */
    interface HTMLCatTabsElement extends Components.CatTabs, HTMLStencilElement {
    }
    var HTMLCatTabsElement: {
        prototype: HTMLCatTabsElement;
        new (): HTMLCatTabsElement;
    };
    /**
     * Textarea specifies a control that allows user to write text over multiple
     * rows. Used when the expected user input is long. For shorter input, use the
     * input component.
     */
    interface HTMLCatTextareaElement extends Components.CatTextarea, HTMLStencilElement {
    }
    var HTMLCatTextareaElement: {
        prototype: HTMLCatTextareaElement;
        new (): HTMLCatTextareaElement;
    };
    /**
     * Inputs are used to allow users to provide text input when the expected input
     * is short. As well as plain text, Input supports various types of text,
     * including passwords and numbers.
     */
    interface HTMLCatTimepickerElement extends Components.CatTimepicker, HTMLStencilElement {
    }
    var HTMLCatTimepickerElement: {
        prototype: HTMLCatTimepickerElement;
        new (): HTMLCatTimepickerElement;
    };
    /**
     * Toggles are graphical interface switches that give user control over a
     * feature or option that can be turned on or off.
     */
    interface HTMLCatToggleElement extends Components.CatToggle, HTMLStencilElement {
    }
    var HTMLCatToggleElement: {
        prototype: HTMLCatToggleElement;
        new (): HTMLCatToggleElement;
    };
    interface HTMLCatTooltipElement extends Components.CatTooltip, HTMLStencilElement {
    }
    var HTMLCatTooltipElement: {
        prototype: HTMLCatTooltipElement;
        new (): HTMLCatTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "cat-alert": HTMLCatAlertElement;
        "cat-avatar": HTMLCatAvatarElement;
        "cat-badge": HTMLCatBadgeElement;
        "cat-button": HTMLCatButtonElement;
        "cat-button-group": HTMLCatButtonGroupElement;
        "cat-card": HTMLCatCardElement;
        "cat-checkbox": HTMLCatCheckboxElement;
        "cat-datepicker": HTMLCatDatepickerElement;
        "cat-dropdown": HTMLCatDropdownElement;
        "cat-form-group": HTMLCatFormGroupElement;
        "cat-icon": HTMLCatIconElement;
        "cat-input": HTMLCatInputElement;
        "cat-label": HTMLCatLabelElement;
        "cat-pagination": HTMLCatPaginationElement;
        "cat-radio": HTMLCatRadioElement;
        "cat-radio-group": HTMLCatRadioGroupElement;
        "cat-rangepicker": HTMLCatRangepickerElement;
        "cat-scrollable": HTMLCatScrollableElement;
        "cat-select": HTMLCatSelectElement;
        "cat-select-demo": HTMLCatSelectDemoElement;
        "cat-skeleton": HTMLCatSkeletonElement;
        "cat-spinner": HTMLCatSpinnerElement;
        "cat-tab": HTMLCatTabElement;
        "cat-tabs": HTMLCatTabsElement;
        "cat-textarea": HTMLCatTextareaElement;
        "cat-timepicker": HTMLCatTimepickerElement;
        "cat-toggle": HTMLCatToggleElement;
        "cat-tooltip": HTMLCatTooltipElement;
    }
}
declare namespace LocalJSX {
    /**
     * Informs user about important changes or conditions in the interface. Use this
     * component if you need to capture user’s attention in a prominent way.
     */
    interface CatAlert {
        /**
          * The color palette of the alert.
         */
        "color"?: 'primary' | 'secondary' | 'danger' | 'success' | 'warning';
        /**
          * The name of an icon to be displayed in the alert.
         */
        "icon"?: string;
        /**
          * Whether the icon of the alert is deactivated.
         */
        "noIcon"?: boolean;
    }
    /**
     * Avatars are used to represent a person or object.
     */
    interface CatAvatar {
        /**
          * An icon to be used instead of the initials.
         */
        "icon"?: string;
        /**
          * Custom initials for the avatar.
         */
        "initials"?: string;
        /**
          * The label of the avatar.
         */
        "label"?: string;
        /**
          * Use round avatar edges.
         */
        "round"?: boolean;
        /**
          * The size of the avatar.
         */
        "size"?: 'xs' | 's' | 'm' | 'l' | 'xl';
        /**
          * An optional avatar image.
         */
        "src"?: string;
        /**
          * A destination to link to, rendered in the href attribute of a link.
         */
        "url"?: string;
        /**
          * Specifies where to open the linked document.
         */
        "urlTarget"?: '_blank' | '_self';
    }
    /**
     * Badges are used to inform users of the status of an object or of an action
     * that’s been taken.
     */
    interface CatBadge {
        /**
          * The color palette of the badge.
         */
        "color"?: 'primary' | 'secondary' | 'danger' | 'success' | 'warning';
        /**
          * Draw attention to the badge with a subtle animation.
         */
        "pulse"?: boolean;
        /**
          * Use round badge edges.
         */
        "round"?: boolean;
        /**
          * The size of the badge.
         */
        "size"?: 'xs' | 's' | 'm' | 'l' | 'xl';
        /**
          * The rendering style of the badge.
         */
        "variant"?: 'filled' | 'outlined';
    }
    /**
     * Buttons are used for interface actions. Primary style should be used only
     * once per view for main call-to-action.
     */
    interface CatButton {
        /**
          * Sets the `aria-current` attribute on the button.
         */
        "a11yCurrent"?: string;
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "a11yLabel"?: string;
        /**
          * Set the button into an active state.
         */
        "active"?: boolean;
        /**
          * The index of a button that is used inside a cat-button-group component
         */
        "buttonGroupPosition"?: 'first' | 'last' | 'middle';
        /**
          * Adds a unique identifier for the button. Please note that with this particular component this ID is added inside the web component. If you need an ID on the HTML element, use the regular `id` attribute instead.
         */
        "buttonId"?: string;
        /**
          * The color palette of the button.
         */
        "color"?: 'primary' | 'secondary' | 'danger' | 'success' | 'warning';
        /**
          * Specifies that the button should be disabled. A disabled button is unusable and un-clickable. Corresponds with the native HTML disabled attribute.
         */
        "disabled"?: boolean;
        /**
          * The name of an icon to be displayed in the button.
         */
        "icon"?: string;
        /**
          * Hide the actual button content and only display the icon.
         */
        "iconOnly"?: boolean | Breakpoint;
        /**
          * Display the icon on the right.
         */
        "iconRight"?: boolean;
        /**
          * Displays the button in a loading state with a spinner. Just like a disabled button, an inactive button is unusable and un-clickable. However, it retains the current focus state.
         */
        "loading"?: boolean;
        /**
          * The name of the button, which gets paired with the button's value when submitted as part of a form. Corresponds with the native HTML name attribute.
         */
        "name"?: string;
        /**
          * Attributes that will be added to the native HTML button element
         */
        "nativeAttributes"?: { [key: string]: string };
        /**
          * Disables ellipse overflowing button content.
         */
        "noEllipsis"?: boolean;
        /**
          * Emitted when the button loses focus.
         */
        "onCatBlur"?: (event: CatButtonCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the button is clicked.
         */
        "onCatClick"?: (event: CatButtonCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when the button received focus.
         */
        "onCatFocus"?: (event: CatButtonCustomEvent<FocusEvent>) => void;
        /**
          * Use round button edges.
         */
        "round"?: boolean;
        /**
          * The size of the button.
         */
        "size"?: 'xs' | 's' | 'm' | 'l' | 'xl';
        /**
          * Allows the button to submit a form.
         */
        "submit"?: boolean;
        /**
          * A destination to link to, rendered in the href attribute of a link.
         */
        "url"?: string;
        /**
          * Specifies where to open the linked document.
         */
        "urlTarget"?: '_blank' | '_self';
        /**
          * The value of the button, which gets paired with the button's name when submitted as part of a form. Corresponds with the native HTML value attribute.
         */
        "value"?: string;
        /**
          * The rendering style of the button.
         */
        "variant"?: 'filled' | 'outlined' | 'text';
    }
    interface CatButtonGroup {
        /**
          * Adds an accessible label for the button group that it is only shown in assistive technologies, like screen readers.
         */
        "a11yLabel"?: string;
    }
    /**
     * Cards are surfaces that display content and actions on a single topic. They
     * should be easy to scan for relevant and actionable information.
     */
    interface CatCard {
    }
    /**
     * Checkboxes are used to let a user choose one or more options from a limited
     * number of options.
     */
    interface CatCheckbox {
        /**
          * Checked state of the checkbox
         */
        "checked"?: boolean;
        /**
          * Disabled state of the checkbox
         */
        "disabled"?: boolean;
        /**
          * Optional hint text(s) to be displayed with the checkbox.
         */
        "hint"?: string | string[];
        /**
          * A unique identifier for the input.
         */
        "identifier"?: string;
        /**
          * Indeterminate state of the checkbox
         */
        "indeterminate"?: boolean;
        /**
          * Label of the checkbox which is presented in the UI
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * Whether the label should appear to the left of the checkbox.
         */
        "labelLeft"?: boolean;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Attributes that will be added to the native HTML input element.
         */
        "nativeAttributes"?: { [key: string]: string };
        /**
          * Emitted when the checkbox loses focus.
         */
        "onCatBlur"?: (event: CatCheckboxCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the checked status of the checkbox is changed.
         */
        "onCatChange"?: (event: CatCheckboxCustomEvent<InputEvent>) => void;
        /**
          * Emitted when the checkbox received focus.
         */
        "onCatFocus"?: (event: CatCheckboxCustomEvent<FocusEvent>) => void;
        /**
          * Required state of the checkbox
         */
        "required"?: boolean;
        /**
          * The value of the checkbox
         */
        "value"?: string | boolean;
    }
    /**
     * Inputs are used to allow users to provide text input when the expected input
     * is short. As well as plain text, Input supports various types of text,
     * including passwords and numbers.
     */
    interface CatDatepicker {
        /**
          * Hint for form autofill feature.
         */
        "autoComplete"?: string;
        /**
          * Whether the input should show a clear button.
         */
        "clearable"?: boolean;
        /**
          * Dates that should be disabled inside the picker
         */
        "datesDisabled": Array<Date> | Array<string>;
        /**
          * Whether the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Fine-grained control over when the errors are shown. Can be `false` to never show errors, `true` to show errors on blur, or a number to show errors on change with the given delay in milliseconds.
         */
        "errorUpdate"?: boolean | number;
        /**
          * The validation errors for this input. Will render a hint under the input with the translated error message(s) `error.${key}`. If an object is passed, the keys will be used as error keys and the values translation parameters. If the value is `true`, the input will be marked as invalid without any hints under the input.
         */
        "errors"?: boolean | string[] | ErrorMap;
        /**
          * The date format after picker selection.
         */
        "format"?: string;
        /**
          * Optional hint text(s) to be displayed with the input.
         */
        "hint"?: string | string[];
        /**
          * Whether the label is on top or left.
         */
        "horizontal"?: boolean;
        /**
          * The name of an icon to be displayed in the input.
         */
        "icon"?: string;
        /**
          * Display the icon on the left.
         */
        "iconLeft"?: boolean;
        /**
          * A unique identifier for the input.
         */
        "identifier"?: string;
        /**
          * The label for the input.
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * A maximum value for date, time and numeric values.
         */
        "max"?: number | string;
        /**
          * A minimum value for date, time and numeric values.
         */
        "min"?: number | string;
        /**
          * The name of the form control. Submitted with the form as part of a name/value pair.
         */
        "name"?: string;
        /**
          * Attributes that will be added to the native HTML input element.
         */
        "nativeAttributes"?: { [key: string]: string };
        /**
          * Emitted when the input loses focus.
         */
        "onCatBlur"?: (event: CatDatepickerCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value is changed.
         */
        "onCatChange"?: (event: CatDatepickerCustomEvent<InputEvent>) => void;
        /**
          * Emitted when the input received focus.
         */
        "onCatFocus"?: (event: CatDatepickerCustomEvent<FocusEvent>) => void;
        /**
          * The placeholder text to display within the input.
         */
        "placeholder"?: string;
        /**
          * The value is not editable.
         */
        "readonly"?: boolean;
        /**
          * A value is required or must be check for the form to be submittable.
         */
        "required"?: boolean;
        /**
          * Whether the label need a marker to shown if the input is required or optional.
         */
        "requiredMarker"?: 'none' | 'required' | 'optional' | 'none!' | 'optional!' | 'required!';
        /**
          * A textual prefix to be displayed in the input.
         */
        "textPrefix"?: string;
        /**
          * A textual suffix to be displayed in the input.
         */
        "textSuffix"?: string;
        /**
          * Type of datepicker ('date', 'week', 'month', 'year').
         */
        "type"?: DatepickerType;
        /**
          * The value of the control.
         */
        "value"?: string;
        /**
          * Whether the picker should show the week numbers.
         */
        "weekNumbers"?: boolean;
    }
    interface CatDropdown {
        /**
          * Do not close the dropdown on outside clicks.
         */
        "noAutoClose"?: boolean;
        /**
          * Emitted when the dropdown is closed.
         */
        "onCatClose"?: (event: CatDropdownCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the dropdown is opened.
         */
        "onCatOpen"?: (event: CatDropdownCustomEvent<FocusEvent>) => void;
        /**
          * Allow overflow when dropdown is open.
         */
        "overflow"?: boolean;
        /**
          * The placement of the dropdown.
         */
        "placement"?: Placement;
    }
    interface CatFormGroup {
        /**
          * Whether the label is on top or left.
         */
        "horizontal"?: boolean;
        /**
          * The space allocated to the input label
         */
        "labelSize"?: string;
        /**
          * Whether the labels need a marker to shown if the forms fields are required or optional.<br /><br /> By default, it is set to auto, it will display the mark depending on the number of required and optional fields: <br /> - If there are more required, the optional will be marked.<br /> - If there are less required, it will mark the required.<br /><br /> If a form field had "!", the requiredMarked of the field would not change.
         */
        "requiredMarker"?: 'none' | 'required' | 'optional' | 'auto';
    }
    /**
     * Icons are used to provide additional meaning or in places where text label
     * doesn't fit.
     */
    interface CatIcon {
        /**
          * Adds accessible label for the icon that is only shown for screen readers. The `aria-hidden` attribute will be set if no label is present.
         */
        "a11yLabel"?: string;
        /**
          * The name of the icon.
         */
        "icon"?: string;
        /**
          * The SVG source of the icon. This takes precenedence over the `icon` name.
         */
        "iconSrc"?: string;
        /**
          * The size of the icon.
         */
        "size"?: 'xs' | 's' | 'm' | 'l' | 'xl' | 'inline';
    }
    /**
     * Inputs are used to allow users to provide text input when the expected input
     * is short. As well as plain text, Input supports various types of text,
     * including passwords and numbers.
     */
    interface CatInput {
        /**
          * Hint for form autofill feature.
         */
        "autoComplete"?: string;
        /**
          * Whether the input should show a clear button.
         */
        "clearable"?: boolean;
        /**
          * Whether the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Fine-grained control over when the errors are shown. Can be `false` to never show errors, `true` to show errors on blur, or a number to show errors on change with the given delay in milliseconds.
         */
        "errorUpdate"?: boolean | number;
        /**
          * The validation errors for this input. Will render a hint under the input with the translated error message(s) `error.${key}`. If an object is passed, the keys will be used as error keys and the values translation parameters. If the value is `true`, the input will be marked as invalid without any hints under the input.
         */
        "errors"?: boolean | string[] | ErrorMap;
        /**
          * Optional hint text(s) to be displayed with the input.
         */
        "hint"?: string | string[];
        /**
          * Whether the label is on top or left.
         */
        "horizontal"?: boolean;
        /**
          * The name of an icon to be displayed in the input.
         */
        "icon"?: string;
        /**
          * Display the icon on the right.
         */
        "iconRight"?: boolean;
        /**
          * A unique identifier for the input.
         */
        "identifier"?: string;
        /**
          * The label for the input.
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * A maximum value for date, time and numeric values.
         */
        "max"?: number | string;
        /**
          * A maximum length (number of characters) for textual values.
         */
        "maxLength"?: number;
        /**
          * A minimum value for date, time and numeric values.
         */
        "min"?: number | string;
        /**
          * A minimum length (number of characters) for textual values.
         */
        "minLength"?: number;
        /**
          * The name of the form control. Submitted with the form as part of a name/value pair.
         */
        "name"?: string;
        /**
          * Attributes that will be added to the native HTML input element.
         */
        "nativeAttributes"?: { [key: string]: string };
        /**
          * Emitted when the input loses focus.
         */
        "onCatBlur"?: (event: CatInputCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value is changed.
         */
        "onCatChange"?: (event: CatInputCustomEvent<InputEvent>) => void;
        /**
          * Emitted when the input received focus.
         */
        "onCatFocus"?: (event: CatInputCustomEvent<FocusEvent>) => void;
        /**
          * The placeholder text to display within the input.
         */
        "placeholder"?: string;
        /**
          * The value is not editable.
         */
        "readonly"?: boolean;
        /**
          * A value is required or must be check for the form to be submittable.
         */
        "required"?: boolean;
        /**
          * Whether the label need a marker to shown if the input is required or optional.
         */
        "requiredMarker"?: 'none' | 'required' | 'optional' | 'none!' | 'optional!' | 'required!';
        /**
          * Use round input edges.
         */
        "round"?: boolean;
        /**
          * A textual prefix to be displayed in the input.
         */
        "textPrefix"?: string;
        /**
          * A textual suffix to be displayed in the input.
         */
        "textSuffix"?: string;
        /**
          * Type of form control.
         */
        "type"?: InputType;
        /**
          * The value of the control.
         */
        "value"?: string | number;
    }
    /**
     * Labels are used to provide a short description of an input or form element.
     * @deprecated Use label attribute of form elements instead.
     */
    interface CatLabel {
        /**
          * The unique identifier for a referenced input.
         */
        "for"?: string;
        /**
          * Whether the label is on top or left.
         */
        "horizontal"?: boolean;
        /**
          * A value is required or must be check for the form to be submittable.
         */
        "required"?: boolean;
        /**
          * Whether the label need a marker to shown if the input is required or optional.
         */
        "requiredMarker"?: 'none' | 'required' | 'optional' | 'none!' | 'optional!' | 'required!';
    }
    /**
     * A navigation component to switch between different pages of paged chunks of
     * data such as a table. Pagination is built with list HTML elements and a
     * wrapping `<nav>` element to identify it as a navigation section to screen
     * readers and other assistive technologies. Furthermore, the current page is
     * correctly highlighted using `aria-current`.
     */
    interface CatPagination {
        /**
          * The number of pages to be shown around the current page.
         */
        "activePadding"?: number;
        /**
          * Use compact pagination mode.
         */
        "compact"?: boolean;
        /**
          * The icon of the "next" button.
         */
        "iconNext"?: string;
        /**
          * The icon of the "previous" button.
         */
        "iconPrev"?: string;
        /**
          * The current page.
         */
        "page"?: number;
        /**
          * The total number of pages.
         */
        "pageCount"?: number;
        /**
          * Use round button edges.
         */
        "round"?: boolean;
        /**
          * The number of pages to be shown at the edges.
         */
        "sidePadding"?: number;
        /**
          * The size of the buttons.
         */
        "size"?: 'xs' | 's' | 'm' | 'l' | 'xl';
        /**
          * The rendering style of the buttons.
         */
        "variant"?: 'filled' | 'outlined' | 'text';
    }
    /**
     * Radio Buttons are graphical interface elements that allow user to choose
     * only one of a predefined set of mutually exclusive options.
     */
    interface CatRadio {
        /**
          * Whether this radio is checked.
         */
        "checked"?: boolean;
        /**
          * Whether this radio is disabled.
         */
        "disabled"?: boolean;
        /**
          * Optional hint text(s) to be displayed with the radio.
         */
        "hint"?: string | string[];
        /**
          * A unique identifier for the input.
         */
        "identifier"?: string;
        /**
          * The label of the radio that is visible.
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * Whether the label should appear to the left of the radio component.
         */
        "labelLeft"?: boolean;
        /**
          * The name of the radio component.
         */
        "name"?: string;
        /**
          * Attributes that will be added to the native HTML input element.
         */
        "nativeAttributes"?: { [key: string]: string };
        /**
          * Emitted when the radio loses focus.
         */
        "onCatBlur"?: (event: CatRadioCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the radio is changed.
         */
        "onCatChange"?: (event: CatRadioCustomEvent<InputEvent>) => void;
        /**
          * Emitted when the radio received focus.
         */
        "onCatFocus"?: (event: CatRadioCustomEvent<FocusEvent>) => void;
        /**
          * Whether the radio is required.
         */
        "required"?: boolean;
        /**
          * The value of the radio component.
         */
        "value"?: string;
    }
    /**
     * A group of radio buttons.
     */
    interface CatRadioGroup {
        /**
          * Adds an accessible label for the radio group that it is only shown in assistive technologies, like screen readers.
         */
        "a11yLabel"?: string;
        /**
          * Whether this radio group is disabled.
         */
        "disabled"?: boolean;
        /**
          * Whether the label of the radios should appear to the left of them.
         */
        "labelLeft"?: boolean;
        /**
          * The name of the radio group component.
         */
        "name"?: string;
        /**
          * Emitted when the radio group loses focus.
         */
        "onCatBlur"?: (event: CatRadioGroupCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value is changed.
         */
        "onCatChange"?: (event: CatRadioGroupCustomEvent<InputEvent>) => void;
        /**
          * The value of the radio group.
         */
        "value"?: string;
    }
    /**
     * Inputs are used to allow users to provide text input when the expected input
     * is short. As well as plain text, Input supports various types of text,
     * including passwords and numbers.
     */
    interface CatRangepicker {
        /**
          * Hint for form autofill feature.
         */
        "autoComplete"?: string;
        /**
          * Whether the input should show a clear button.
         */
        "clearable"?: boolean;
        /**
          * Dates that should be disabled inside the picker
         */
        "datesDisabled": Array<Date> | Array<string>;
        /**
          * Whether the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Fine-grained control over when the errors are shown. Can be `false` to never show errors, `true` to show errors on blur, or a number to show errors on change with the given delay in milliseconds.
         */
        "errorUpdate"?: boolean | number;
        /**
          * The validation errors for this input. Will render a hint under the input with the translated error message(s) `error.${key}`. If an object is passed, the keys will be used as error keys and the values translation parameters. If the value is `true`, the input will be marked as invalid without any hints under the input.
         */
        "errors"?: boolean | string[] | ErrorMap;
        /**
          * The date format after picker selection.
         */
        "format"?: string;
        /**
          * Optional hint text(s) to be displayed with the input.
         */
        "hint"?: string | string[];
        /**
          * Whether the label is on top or left.
         */
        "horizontal"?: boolean;
        /**
          * The name of an icon to be displayed in the input.
         */
        "icon"?: string;
        /**
          * Display the icon on the left.
         */
        "iconLeft"?: boolean;
        /**
          * A unique identifier for the input.
         */
        "identifier"?: string;
        /**
          * The label for the input.
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * A maximum value for date, time and numeric values.
         */
        "max"?: number | string;
        /**
          * A minimum value for date, time and numeric values.
         */
        "min"?: number | string;
        /**
          * The name of the form control. Submitted with the form as part of a name/value pair.
         */
        "name"?: string;
        /**
          * Attributes that will be added to the native HTML input element.
         */
        "nativeAttributes"?: { [key: string]: string };
        /**
          * Emitted when the input loses focus.
         */
        "onCatBlur"?: (event: CatRangepickerCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value is changed.
         */
        "onCatChange"?: (event: CatRangepickerCustomEvent<InputEvent>) => void;
        /**
          * Emitted when the input received focus.
         */
        "onCatFocus"?: (event: CatRangepickerCustomEvent<FocusEvent>) => void;
        /**
          * The placeholder text to display within the input.
         */
        "placeholder"?: string;
        /**
          * The value is not editable.
         */
        "readonly"?: boolean;
        /**
          * A value is required or must be check for the form to be submittable.
         */
        "required"?: boolean;
        /**
          * Whether the label need a marker to shown if the input is required or optional.
         */
        "requiredMarker"?: 'none' | 'required' | 'optional' | 'none!' | 'optional!' | 'required!';
        /**
          * A textual prefix to be displayed in the input.
         */
        "textPrefix"?: string;
        /**
          * A textual suffix to be displayed in the input.
         */
        "textSuffix"?: string;
        /**
          * The value of the control.
         */
        "value"?: { start: string; end: string };
        /**
          * Whether the picker should show the week numbers.
         */
        "weekNumbers"?: boolean;
    }
    /**
     * An element to display scrollable content.
     */
    interface CatScrollable {
        /**
          * Flags to disable/enable overflowX.
         */
        "noOverflowX"?: boolean;
        /**
          * Flags to disable/enable overflowY.
         */
        "noOverflowY"?: boolean;
        /**
          * Flag to disable/enable overscroll behavior.
         */
        "noOverscroll"?: boolean;
        /**
          * Flag to not fire an initial event after content initialization.
         */
        "noScrolledInit"?: boolean;
        /**
          * Flags to disable/enable scroll shadowX.
         */
        "noShadowX"?: boolean;
        /**
          * Flags to disable/enable scroll shadowY.
         */
        "noShadowY"?: boolean;
        /**
          * Emitted when the content is fully scrolled to the bottom.
         */
        "onScrolledBottom"?: (event: CatScrollableCustomEvent<void>) => void;
        /**
          * Emitted when the content is fully scrolled to the left.
         */
        "onScrolledLeft"?: (event: CatScrollableCustomEvent<void>) => void;
        /**
          * Emitted when the content is fully scrolled to the right.
         */
        "onScrolledRight"?: (event: CatScrollableCustomEvent<void>) => void;
        /**
          * Emitted when the content is fully scrolled to the top.
         */
        "onScrolledTop"?: (event: CatScrollableCustomEvent<void>) => void;
        /**
          * Buffer to be used to calculate the scroll distance.
         */
        "scrolledBuffer"?: number;
    }
    /**
     * Select lets user choose one option from an options' menu. Consider using
     * select when you have 6 or more options. Select component supports any content
     * type.
     */
    interface CatSelect {
        /**
          * Whether the select should show a clear button.
         */
        "clearable"?: boolean;
        /**
          * The debounce time for the search.
         */
        "debounce"?: number;
        /**
          * Whether the select is disabled.
         */
        "disabled"?: boolean;
        /**
          * Fine-grained control over when the errors are shown. Can be `false` to never show errors, `true` to show errors on blur, or a number to show errors on change with the given delay in milliseconds.
         */
        "errorUpdate"?: boolean | number;
        /**
          * The validation errors for this input. Will render a hint under the input with the translated error message(s) `error.${key}`. If an object is passed, the keys will be used as error keys and the values translation parameters. If the value is `true`, the input will be marked as invalid without any hints under the input.
         */
        "errors"?: boolean | string[] | ErrorMap;
        /**
          * Optional hint text(s) to be displayed with the select.
         */
        "hint"?: string | string[];
        /**
          * Whether the label is on top or left.
         */
        "horizontal"?: boolean;
        /**
          * A unique identifier for the input.
         */
        "identifier"?: string;
        /**
          * The label for the select.
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * Enable multiple selection.
         */
        "multiple"?: boolean;
        /**
          * The name of the form control. Submitted with the form as part of a name/value pair.
         */
        "name"?: string;
        /**
          * Attributes that will be added to the native HTML input element.
         */
        "nativeAttributes"?: { [key: string]: string };
        /**
          * The text to display in the dropdown if no results are found.
         */
        "noItems"?: string;
        /**
          * Emitted when the select loses the focus.
         */
        "onCatBlur"?: (event: CatSelectCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value is changed.
         */
        "onCatChange"?: (event: CatSelectCustomEvent<InputEvent>) => void;
        /**
          * Emitted when the select dropdown is closed.
         */
        "onCatClose"?: (event: CatSelectCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the select dropdown is opened.
         */
        "onCatOpen"?: (event: CatSelectCustomEvent<FocusEvent>) => void;
        /**
          * The placeholder text to display within the select.
         */
        "placeholder"?: string;
        /**
          * The placement of the select.
         */
        "placement"?: Placement;
        /**
          * A value is required or must be checked for the form to be submittable.
         */
        "required"?: boolean;
        /**
          * Whether the label need a marker to shown if the select is required or optional.
         */
        "requiredMarker"?: 'none' | 'required' | 'optional' | 'none!' | 'optional!' | 'required!';
        /**
          * Optional hint text to be displayed on the new item to be added.
         */
        "tagHint"?: string;
        /**
          * Whether the select should add new items.
         */
        "tags"?: boolean;
        /**
          * The value of the select. <br /> <br /> The value of the select depends on whether it is allowed to choose a single item or several items. <br /> When only one item can be selected, the value is the id of the item, in case several items can be selected, the value is an array of ids of the selected items. <br /> <br /> In case the user can add new items to the select (tags activated), the value in the single select is an object (CatSelectTaggingValue) with the id of the item or the name of the created item, in the case of multiple select, it is an object (CatSelectMultipleTaggingValue) with the array of the ids of the items selected and the array of the names of the items created
         */
        "value"?: string | string[] | CatSelectTaggingValue | CatSelectMultipleTaggingValue;
    }
    interface CatSelectDemo {
    }
    /**
     * Skeletons are used to show where content will eventually be drawn.
     */
    interface CatSkeleton {
        /**
          * The animation style of the skeleton.
         */
        "effect"?: 'plain' | 'sheen' | 'pulse';
        /**
          * The number of text lines to be rendered for "head" and "body" variants. Defaults to 1 for "head" and 3 for "body". Will be ignored for other variants.
         */
        "lines"?: number;
        /**
          * The size of the skeleton. If the variant is set to "head", the size values "xs" to "xl" translate to the head levels `h1` to `h5`.
         */
        "size"?: 'xs' | 's' | 'm' | 'l' | 'xl';
        /**
          * The rendering style of the skeleton.
         */
        "variant"?: 'rectangle' | 'square' | 'circle' | 'head' | 'body';
    }
    /**
     * Spinners are used to indicate users that their action is being processed.
     */
    interface CatSpinner {
        /**
          * Adds accessible label for the spinner that is only shown for screen readers. The `aria-hidden` attribute will be set if no label is present.
         */
        "a11yLabel"?: string;
        /**
          * The size of the spinner.
         */
        "size"?: 'xs' | 's' | 'm' | 'l' | 'xl' | 'inline';
    }
    /**
     * A single tab inside a tabs component.
     */
    interface CatTab {
        /**
          * Specifies that the tab should be deactivated.
         */
        "deactivated"?: boolean;
        /**
          * The name of an icon to be displayed in the tab.
         */
        "icon"?: string;
        /**
          * Hide the actual button content and only display the tab.
         */
        "iconOnly"?: boolean | Breakpoint;
        /**
          * Display the icon on the right.
         */
        "iconRight"?: boolean;
        /**
          * The label of the tab.
         */
        "label"?: string;
        /**
          * Emitted when tab is clicked.
         */
        "onTabClick"?: (event: CatTabCustomEvent<MouseEvent>) => void;
        /**
          * A destination to link to, rendered in the href attribute of a link.
         */
        "url"?: string;
        /**
          * Specifies where to open the linked document.
         */
        "urlTarget"?: '_blank' | '_self';
    }
    /**
     * Tabs are used to display multiple panels to be contained within a single
     * window, using tabs as a navigational element.
     */
    interface CatTabs {
        /**
          * The ID of the active tab.
         */
        "activeTab"?: string;
        /**
          * The alignment of the tabs.
         */
        "tabsAlign"?: 'left' | 'center' | 'right' | 'justify';
    }
    /**
     * Textarea specifies a control that allows user to write text over multiple
     * rows. Used when the expected user input is long. For shorter input, use the
     * input component.
     */
    interface CatTextarea {
        /**
          * Whether the textarea is disabled.
         */
        "disabled"?: boolean;
        /**
          * Fine-grained control over when the errors are shown. Can be `false` to never show errors, `true` to show errors on blur, or a number to show errors on change with the given delay in milliseconds.
         */
        "errorUpdate"?: boolean | number;
        /**
          * The validation errors for this input. Will render a hint under the input with the translated error message(s) `error.${key}`. If an object is passed, the keys will be used as error keys and the values translation parameters. If the value is `true`, the input will be marked as invalid without any hints under the input.
         */
        "errors"?: boolean | string[] | ErrorMap;
        /**
          * Optional hint text(s) to be displayed with the textarea.
         */
        "hint"?: string | string[];
        /**
          * Whether the label is on top or left.
         */
        "horizontal"?: boolean;
        /**
          * A unique identifier for the input.
         */
        "identifier"?: string;
        /**
          * The label for the textarea.
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * A maximum length (number of characters) for textual values.
         */
        "maxLength"?: number;
        /**
          * A minimum length (number of characters) for textual values.
         */
        "minLength"?: number;
        /**
          * The name of the form control. Submitted with the form as part of a name/value pair.
         */
        "name"?: string;
        /**
          * Attributes that will be added to the native HTML textarea element.
         */
        "nativeAttributes"?: { [key: string]: string };
        /**
          * Emitted when the textarea loses focus.
         */
        "onCatBlur"?: (event: CatTextareaCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value is changed.
         */
        "onCatChange"?: (event: CatTextareaCustomEvent<InputEvent>) => void;
        /**
          * Emitted when the textarea received focus.
         */
        "onCatFocus"?: (event: CatTextareaCustomEvent<FocusEvent>) => void;
        /**
          * The placeholder text to display within the input.
         */
        "placeholder"?: string;
        /**
          * The value is not editable.
         */
        "readonly"?: boolean;
        /**
          * A value is required or must be check for the form to be submittable.
         */
        "required"?: boolean;
        /**
          * Whether the label need a marker to shown if the textarea is required or optional.
         */
        "requiredMarker"?: 'none' | 'required' | 'optional' | 'none!' | 'optional!' | 'required!';
        /**
          * Specifies the initial number of lines in the textarea.
         */
        "rows"?: number;
        /**
          * The initial value of the control.
         */
        "value"?: string | number;
    }
    /**
     * Inputs are used to allow users to provide text input when the expected input
     * is short. As well as plain text, Input supports various types of text,
     * including passwords and numbers.
     */
    interface CatTimepicker {
        /**
          * Whether the select should show a clear button.
         */
        "clearable"?: boolean;
        /**
          * Whether the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Fine-grained control over when the errors are shown. Can be `false` to never show errors, `true` to show errors on blur, or a number to show errors on change with the given delay in milliseconds.
         */
        "errorUpdate"?: boolean | number;
        /**
          * The validation errors for this input. Will render a hint under the input with the translated error message(s) `error.${key}`. If an object is passed, the keys will be used as error keys and the values translation parameters. If the value is `true`, the input will be marked as invalid without any hints under the input.
         */
        "errors"?: boolean | string[] | ErrorMap;
        /**
          * Optional hint text(s) to be displayed with the input.
         */
        "hint"?: string | string[];
        /**
          * Whether the label is on top or left.
         */
        "horizontal"?: boolean;
        /**
          * Attributes that will be added to the native HTML input element.
         */
        "hourShort"?: boolean;
        /**
          * A unique identifier for the input.
         */
        "identifier"?: string;
        /**
          * The label for the input.
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * A maximum value for date, time and numeric values.
         */
        "max"?: string;
        /**
          * A minimum value for date, time and numeric values.
         */
        "min"?: string;
        /**
          * Attributes that will be added to the native HTML input element.
         */
        "minutesStep"?: number;
        /**
          * Enable multiple selection.
         */
        "multiple"?: boolean;
        /**
          * The name of the form control. Submitted with the form as part of a name/value pair.
         */
        "name"?: string;
        /**
          * Attributes that will be added to the native HTML input element.
         */
        "nativeAttributes"?: { [key: string]: string };
        /**
          * The text to display in the dropdown if no results are found.
         */
        "noItems"?: string;
        /**
          * Emitted when the select loses the focus.
         */
        "onCatBlur"?: (event: CatTimepickerCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value is changed.
         */
        "onCatChange"?: (event: CatTimepickerCustomEvent<any>) => void;
        /**
          * Emitted when the select dropdown is closed.
         */
        "onCatClose"?: (event: CatTimepickerCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the select dropdown is opened.
         */
        "onCatOpen"?: (event: CatTimepickerCustomEvent<FocusEvent>) => void;
        /**
          * The placeholder text to display within the select.
         */
        "placeholder"?: string;
        /**
          * The placement of the select.
         */
        "placement"?: Placement;
        /**
          * A value is required or must be checked for the form to be submittable.
         */
        "required"?: boolean;
        /**
          * Whether the label need a marker to shown if the input is required or optional.
         */
        "requiredMarker"?: 'none' | 'required' | 'optional' | 'none!' | 'optional!' | 'required!';
        /**
          * The value of the select. <br /> <br /> The value of the select depends on whether it is allowed to choose a single item or several items. <br /> When only one item can be selected, the value is the id of the item, in case several items can be selected, the value is an array of ids of the selected items. <br /> <br /> In case the user can add new items to the select (tags activated), the value in the single select is an object (CatSelectTaggingValue) with the id of the item or the name of the created item, in the case of multiple select, it is an object (CatSelectMultipleTaggingValue) with the array of the ids of the items selected and the array of the names of the items created
         */
        "value"?: string | string[] | CatSelectTaggingValue1 | CatSelectMultipleTaggingValue1;
    }
    /**
     * Toggles are graphical interface switches that give user control over a
     * feature or option that can be turned on or off.
     */
    interface CatToggle {
        /**
          * Checked state of the toggle.
         */
        "checked"?: boolean;
        /**
          * Disabled state of the toggle.
         */
        "disabled"?: boolean;
        /**
          * Optional hint text(s) to be displayed with the toggle.
         */
        "hint"?: string | string[];
        /**
          * A unique identifier for the input.
         */
        "identifier"?: string;
        /**
          * The label of the toggle that is visible.
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to assistive technologies like screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * Whether the label should appear to the left of the toggle.
         */
        "labelLeft"?: boolean;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Attributes that will be added to the native HTML input element.
         */
        "nativeAttributes"?: { [key: string]: string };
        /**
          * Emitted when the toggle loses focus.
         */
        "onCatBlur"?: (event: CatToggleCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the checked status of the toggle is changed.
         */
        "onCatChange"?: (event: CatToggleCustomEvent<InputEvent>) => void;
        /**
          * Emitted when the toggle received focus.
         */
        "onCatFocus"?: (event: CatToggleCustomEvent<FocusEvent>) => void;
        /**
          * Required state of the toggle.
         */
        "required"?: boolean;
        /**
          * The value of the toggle
         */
        "value"?: string | boolean;
    }
    interface CatTooltip {
        /**
          * The content of the tooltip.
         */
        "content"?: string;
        /**
          * Specifies that the tooltip should be disabled. A disabled tooltip is unusable, and invisible. Corresponds with the native HTML disabled attribute.
         */
        "disabled"?: boolean;
        /**
          * The delay time for hiding tooltip in ms.
         */
        "hideDelay"?: number;
        /**
          * The duration of tap to show the tooltip.
         */
        "longTouchDuration"?: number;
        /**
          * The placement of the tooltip.
         */
        "placement"?: Placement;
        /**
          * Use round tooltip edges.
         */
        "round"?: boolean;
        /**
          * The delay time for showing tooltip in ms.
         */
        "showDelay"?: number;
        /**
          * The size of the tooltip.
         */
        "size"?: 's' | 'm' | 'l';
    }
    interface IntrinsicElements {
        "cat-alert": CatAlert;
        "cat-avatar": CatAvatar;
        "cat-badge": CatBadge;
        "cat-button": CatButton;
        "cat-button-group": CatButtonGroup;
        "cat-card": CatCard;
        "cat-checkbox": CatCheckbox;
        "cat-datepicker": CatDatepicker;
        "cat-dropdown": CatDropdown;
        "cat-form-group": CatFormGroup;
        "cat-icon": CatIcon;
        "cat-input": CatInput;
        "cat-label": CatLabel;
        "cat-pagination": CatPagination;
        "cat-radio": CatRadio;
        "cat-radio-group": CatRadioGroup;
        "cat-rangepicker": CatRangepicker;
        "cat-scrollable": CatScrollable;
        "cat-select": CatSelect;
        "cat-select-demo": CatSelectDemo;
        "cat-skeleton": CatSkeleton;
        "cat-spinner": CatSpinner;
        "cat-tab": CatTab;
        "cat-tabs": CatTabs;
        "cat-textarea": CatTextarea;
        "cat-timepicker": CatTimepicker;
        "cat-toggle": CatToggle;
        "cat-tooltip": CatTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * Informs user about important changes or conditions in the interface. Use this
             * component if you need to capture user’s attention in a prominent way.
             */
            "cat-alert": LocalJSX.CatAlert & JSXBase.HTMLAttributes<HTMLCatAlertElement>;
            /**
             * Avatars are used to represent a person or object.
             */
            "cat-avatar": LocalJSX.CatAvatar & JSXBase.HTMLAttributes<HTMLCatAvatarElement>;
            /**
             * Badges are used to inform users of the status of an object or of an action
             * that’s been taken.
             */
            "cat-badge": LocalJSX.CatBadge & JSXBase.HTMLAttributes<HTMLCatBadgeElement>;
            /**
             * Buttons are used for interface actions. Primary style should be used only
             * once per view for main call-to-action.
             */
            "cat-button": LocalJSX.CatButton & JSXBase.HTMLAttributes<HTMLCatButtonElement>;
            "cat-button-group": LocalJSX.CatButtonGroup & JSXBase.HTMLAttributes<HTMLCatButtonGroupElement>;
            /**
             * Cards are surfaces that display content and actions on a single topic. They
             * should be easy to scan for relevant and actionable information.
             */
            "cat-card": LocalJSX.CatCard & JSXBase.HTMLAttributes<HTMLCatCardElement>;
            /**
             * Checkboxes are used to let a user choose one or more options from a limited
             * number of options.
             */
            "cat-checkbox": LocalJSX.CatCheckbox & JSXBase.HTMLAttributes<HTMLCatCheckboxElement>;
            /**
             * Inputs are used to allow users to provide text input when the expected input
             * is short. As well as plain text, Input supports various types of text,
             * including passwords and numbers.
             */
            "cat-datepicker": LocalJSX.CatDatepicker & JSXBase.HTMLAttributes<HTMLCatDatepickerElement>;
            "cat-dropdown": LocalJSX.CatDropdown & JSXBase.HTMLAttributes<HTMLCatDropdownElement>;
            "cat-form-group": LocalJSX.CatFormGroup & JSXBase.HTMLAttributes<HTMLCatFormGroupElement>;
            /**
             * Icons are used to provide additional meaning or in places where text label
             * doesn't fit.
             */
            "cat-icon": LocalJSX.CatIcon & JSXBase.HTMLAttributes<HTMLCatIconElement>;
            /**
             * Inputs are used to allow users to provide text input when the expected input
             * is short. As well as plain text, Input supports various types of text,
             * including passwords and numbers.
             */
            "cat-input": LocalJSX.CatInput & JSXBase.HTMLAttributes<HTMLCatInputElement>;
            /**
             * Labels are used to provide a short description of an input or form element.
             * @deprecated Use label attribute of form elements instead.
             */
            "cat-label": LocalJSX.CatLabel & JSXBase.HTMLAttributes<HTMLCatLabelElement>;
            /**
             * A navigation component to switch between different pages of paged chunks of
             * data such as a table. Pagination is built with list HTML elements and a
             * wrapping `<nav>` element to identify it as a navigation section to screen
             * readers and other assistive technologies. Furthermore, the current page is
             * correctly highlighted using `aria-current`.
             */
            "cat-pagination": LocalJSX.CatPagination & JSXBase.HTMLAttributes<HTMLCatPaginationElement>;
            /**
             * Radio Buttons are graphical interface elements that allow user to choose
             * only one of a predefined set of mutually exclusive options.
             */
            "cat-radio": LocalJSX.CatRadio & JSXBase.HTMLAttributes<HTMLCatRadioElement>;
            /**
             * A group of radio buttons.
             */
            "cat-radio-group": LocalJSX.CatRadioGroup & JSXBase.HTMLAttributes<HTMLCatRadioGroupElement>;
            /**
             * Inputs are used to allow users to provide text input when the expected input
             * is short. As well as plain text, Input supports various types of text,
             * including passwords and numbers.
             */
            "cat-rangepicker": LocalJSX.CatRangepicker & JSXBase.HTMLAttributes<HTMLCatRangepickerElement>;
            /**
             * An element to display scrollable content.
             */
            "cat-scrollable": LocalJSX.CatScrollable & JSXBase.HTMLAttributes<HTMLCatScrollableElement>;
            /**
             * Select lets user choose one option from an options' menu. Consider using
             * select when you have 6 or more options. Select component supports any content
             * type.
             */
            "cat-select": LocalJSX.CatSelect & JSXBase.HTMLAttributes<HTMLCatSelectElement>;
            "cat-select-demo": LocalJSX.CatSelectDemo & JSXBase.HTMLAttributes<HTMLCatSelectDemoElement>;
            /**
             * Skeletons are used to show where content will eventually be drawn.
             */
            "cat-skeleton": LocalJSX.CatSkeleton & JSXBase.HTMLAttributes<HTMLCatSkeletonElement>;
            /**
             * Spinners are used to indicate users that their action is being processed.
             */
            "cat-spinner": LocalJSX.CatSpinner & JSXBase.HTMLAttributes<HTMLCatSpinnerElement>;
            /**
             * A single tab inside a tabs component.
             */
            "cat-tab": LocalJSX.CatTab & JSXBase.HTMLAttributes<HTMLCatTabElement>;
            /**
             * Tabs are used to display multiple panels to be contained within a single
             * window, using tabs as a navigational element.
             */
            "cat-tabs": LocalJSX.CatTabs & JSXBase.HTMLAttributes<HTMLCatTabsElement>;
            /**
             * Textarea specifies a control that allows user to write text over multiple
             * rows. Used when the expected user input is long. For shorter input, use the
             * input component.
             */
            "cat-textarea": LocalJSX.CatTextarea & JSXBase.HTMLAttributes<HTMLCatTextareaElement>;
            /**
             * Inputs are used to allow users to provide text input when the expected input
             * is short. As well as plain text, Input supports various types of text,
             * including passwords and numbers.
             */
            "cat-timepicker": LocalJSX.CatTimepicker & JSXBase.HTMLAttributes<HTMLCatTimepickerElement>;
            /**
             * Toggles are graphical interface switches that give user control over a
             * feature or option that can be turned on or off.
             */
            "cat-toggle": LocalJSX.CatToggle & JSXBase.HTMLAttributes<HTMLCatToggleElement>;
            "cat-tooltip": LocalJSX.CatTooltip & JSXBase.HTMLAttributes<HTMLCatTooltipElement>;
        }
    }
}
